//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.18033
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CalculatorConsole.Calculator {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/CalculatorService")]
    [System.SerializableAttribute()]
    public partial class ServiceData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorDetailsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorDetails {
            get {
                return this.ErrorDetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorDetailsField, value) != true)) {
                    this.ErrorDetailsField = value;
                    this.RaisePropertyChanged("ErrorDetails");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Calculator", ConfigurationName="Calculator.ICalculatorService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ICalculatorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/Test", ReplyAction="Calculator/ICalculatorService/TestResponse")]
        string Test(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/Test", ReplyAction="Calculator/ICalculatorService/TestResponse")]
        System.Threading.Tasks.Task<string> TestAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/ExceptionTest", ReplyAction="Calculator/ICalculatorService/ExceptionTestResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(CalculatorConsole.Calculator.ServiceData), Action="Calculator/ICalculatorService/ExceptionTestServiceDataFault", Name="ServiceData", Namespace="http://schemas.datacontract.org/2004/07/CalculatorService")]
        void ExceptionTest();
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/ExceptionTest", ReplyAction="Calculator/ICalculatorService/ExceptionTestResponse")]
        System.Threading.Tasks.Task ExceptionTestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/Add", ReplyAction="Calculator/ICalculatorService/AddResponse")]
        double Add(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/Add", ReplyAction="Calculator/ICalculatorService/AddResponse")]
        System.Threading.Tasks.Task<double> AddAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/Subtract", ReplyAction="Calculator/ICalculatorService/SubtractResponse")]
        double Subtract(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/Subtract", ReplyAction="Calculator/ICalculatorService/SubtractResponse")]
        System.Threading.Tasks.Task<double> SubtractAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/Multiply", ReplyAction="Calculator/ICalculatorService/MultiplyResponse")]
        double Multiply(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/Multiply", ReplyAction="Calculator/ICalculatorService/MultiplyResponse")]
        System.Threading.Tasks.Task<double> MultiplyAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/Divide", ReplyAction="Calculator/ICalculatorService/DivideResponse")]
        double Divide(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/Divide", ReplyAction="Calculator/ICalculatorService/DivideResponse")]
        System.Threading.Tasks.Task<double> DivideAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/Calculate", ReplyAction="Calculator/ICalculatorService/CalculateResponse")]
        double Calculate(string expression);
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/Calculate", ReplyAction="Calculator/ICalculatorService/CalculateResponse")]
        System.Threading.Tasks.Task<double> CalculateAsync(string expression);
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/Save", ReplyAction="Calculator/ICalculatorService/SaveResponse")]
        void Save(string name, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/Save", ReplyAction="Calculator/ICalculatorService/SaveResponse")]
        System.Threading.Tasks.Task SaveAsync(string name, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/Clear", ReplyAction="Calculator/ICalculatorService/ClearResponse")]
        void Clear(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/Clear", ReplyAction="Calculator/ICalculatorService/ClearResponse")]
        System.Threading.Tasks.Task ClearAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/ClearAll", ReplyAction="Calculator/ICalculatorService/ClearAllResponse")]
        void ClearAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="Calculator/ICalculatorService/ClearAll", ReplyAction="Calculator/ICalculatorService/ClearAllResponse")]
        System.Threading.Tasks.Task ClearAllAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorServiceChannel : CalculatorConsole.Calculator.ICalculatorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorServiceClient : System.ServiceModel.ClientBase<CalculatorConsole.Calculator.ICalculatorService>, CalculatorConsole.Calculator.ICalculatorService {
        
        public CalculatorServiceClient() {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Test(int value) {
            return base.Channel.Test(value);
        }
        
        public System.Threading.Tasks.Task<string> TestAsync(int value) {
            return base.Channel.TestAsync(value);
        }
        
        public void ExceptionTest() {
            base.Channel.ExceptionTest();
        }
        
        public System.Threading.Tasks.Task ExceptionTestAsync() {
            return base.Channel.ExceptionTestAsync();
        }
        
        public double Add(double a, double b) {
            return base.Channel.Add(a, b);
        }
        
        public System.Threading.Tasks.Task<double> AddAsync(double a, double b) {
            return base.Channel.AddAsync(a, b);
        }
        
        public double Subtract(double a, double b) {
            return base.Channel.Subtract(a, b);
        }
        
        public System.Threading.Tasks.Task<double> SubtractAsync(double a, double b) {
            return base.Channel.SubtractAsync(a, b);
        }
        
        public double Multiply(double a, double b) {
            return base.Channel.Multiply(a, b);
        }
        
        public System.Threading.Tasks.Task<double> MultiplyAsync(double a, double b) {
            return base.Channel.MultiplyAsync(a, b);
        }
        
        public double Divide(double a, double b) {
            return base.Channel.Divide(a, b);
        }
        
        public System.Threading.Tasks.Task<double> DivideAsync(double a, double b) {
            return base.Channel.DivideAsync(a, b);
        }
        
        public double Calculate(string expression) {
            return base.Channel.Calculate(expression);
        }
        
        public System.Threading.Tasks.Task<double> CalculateAsync(string expression) {
            return base.Channel.CalculateAsync(expression);
        }
        
        public void Save(string name, double value) {
            base.Channel.Save(name, value);
        }
        
        public System.Threading.Tasks.Task SaveAsync(string name, double value) {
            return base.Channel.SaveAsync(name, value);
        }
        
        public void Clear(string name) {
            base.Channel.Clear(name);
        }
        
        public System.Threading.Tasks.Task ClearAsync(string name) {
            return base.Channel.ClearAsync(name);
        }
        
        public void ClearAll() {
            base.Channel.ClearAll();
        }
        
        public System.Threading.Tasks.Task ClearAllAsync() {
            return base.Channel.ClearAllAsync();
        }
    }
}
